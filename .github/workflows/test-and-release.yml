# This is a composition of lint and test scripts
# Make sure to update this file along with the others

name: Test and Release

# Run this job on all pushes and pull requests
# as well as tags with a semantic version
on:
  push:
    branches:
      - '*'
    tags:
      # normal versions
      - "v?[0-9]+.[0-9]+.[0-9]+"
      # pre-releases
      - "v?[0-9]+.[0-9]+.[0-9]+-**"
  pull_request: {}

jobs:
  get-node-lts:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - uses: actions/checkout@v3

      - name: Node LTS versions
        uses: Jey-Cee/node-lts-versions@1.1.8
        id: node-lts-versions

      - id: set-matrix
        run: echo "::set-output name=matrix::${{ steps.node-lts-versions.outputs.lts }}"

  # Get the minimum Node version from iobroker.js-controller
  get-minimum-node-version:
    runs-on: ubuntu-latest
    outputs:
      MIN_NODE: ${{ steps.get_version.outputs.MIN_NODE }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Download package.json from js-controller
        uses: carlosperate/download-file-action@v2.0.0
        id: download-package
        with:
          file-url: 'https://raw.githubusercontent.com/ioBroker/ioBroker.js-controller/master/package.json'
          file-name: 'package.json'
          location: './js-controller'

      - name: Read node and npm versions from package.json
        uses: skjnldsv/read-package-engines-version-actions@v2
        with:
          path: "./js-controller"
        id: package-engines-versions

      - name: Get version
        id: get_version
        run: |
          NODE_VERSION="${{ steps.package-engines-versions.outputs.nodeVersion }}"
          NODE_VERSION_CLEANED="${NODE_VERSION//>=/}"
          NODE_VERSION_CLEANED="${NODE_VERSION_CLEANED//.[[:digit:]].[[:digit:]]/}"
          echo "::set-output name=MIN_NODE::$NODE_VERSION_CLEANED"

  # Performs quick checks before the expensive test runs
  check-and-lint:
    needs: [get-minimum-node-version]
    if: contains(github.event.head_commit.message, '[skip ci]') == false

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.get-minimum-node-version.outputs.MIN_NODE }}

      - name: Install Dependencies
        run: npm ci


  # Runs adapter tests on all supported node versions and OSes
  adapter-tests:
    if: contains(github.event.head_commit.message, '[skip ci]') == false

    needs: [check-and-lint, get-node-lts]

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: ${{ fromJSON(needs.get-node-lts.outputs.matrix) }}
        os: [ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies
        run: npm ci

      - name: Run local tests
        run: npm test
  #      - name: Run unit tests
  #        run: npm run test:unit
  #      - name: Run integration tests # (linux/osx)
  #        if: startsWith(runner.OS, 'windows') == false
  #        run: DEBUG=testing:* npm run test:integration
  #      - name: Run integration tests # (windows)
  #        if: startsWith(runner.OS, 'windows')
  #        run: set DEBUG=testing:* & npm run test:integration

  # Deploys the final package to NPM
  deploy:
    needs: [adapter-tests]

    # Trigger this step only when a commit on master is tagged with a version number
    if: |
      contains(github.event.head_commit.message, '[skip ci]') == false &&
      github.event_name == 'push' &&
      startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Node.js ${{ needs.get-minimum-node-version.outputs.MIN_NODE }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.get-minimum-node-version.outputs.MIN_NODE }}

      - name: Extract the version and commit body from the tag
        id: extract_release
        # The body may be multiline, therefore we need to escape some characters
        run: |
          VERSION="${{ github.ref }}"
          VERSION=${VERSION##*/}
          VERSION=${VERSION##*v}
          echo "::set-output name=VERSION::$VERSION"
          BODY=$(git show -s --format=%b)
          BODY="${BODY//'%'/'%25'}"
          BODY="${BODY//$'\n'/'%0A'}"
          BODY="${BODY//$'\r'/'%0D'}"
          echo "::set-output name=BODY::$BODY"

      - name: Install Dependencies
        run: npm ci

      #      - name: Create a clean build
      #        run: npm run build
      - name: Publish package to npm
        run: |
          npm config set //registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}
          npm whoami
          npm publish

      - name: Create Github Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release v${{ steps.extract_release.outputs.VERSION }}
          draft: false
          # Prerelease versions create prereleases on Github
          prerelease: ${{ contains(steps.extract_release.outputs.VERSION, '-') }}
          body: ${{ steps.extract_release.outputs.BODY }}

      - name: Notify Sentry.io about the release
        run: |
          npm i -g @sentry/cli
          export SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
          export SENTRY_URL=https://sentry.iobroker.net
          export SENTRY_ORG=iobroker
          export SENTRY_PROJECT=iobroker-chromecast
          export SENTRY_VERSION=iobroker.chromecast@${{ env.VERSION }}
          sentry-cli releases new $SENTRY_VERSION
          sentry-cli releases set-commits $SENTRY_VERSION --auto
          sentry-cli releases finalize $SENTRY_VERSION

        # Add the following line BEFORE finalize if sourcemap uploads are needed
        # sentry-cli releases files $SENTRY_VERSION upload-sourcemaps build
